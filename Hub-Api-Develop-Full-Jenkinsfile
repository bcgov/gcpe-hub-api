node('master') {

    // TODO: review getting this to work with sonarqube scanner for msbuild plugin
    // stage('SCM') {
    //   git 'https://github.com/bcgov/gcpe-hub-api'
    // }

    // stage('Build + SonarQube analysis') {
    //   def sqScannerMsBuildHome = tool 'ntu9uh-sonar-scanner'
    //   withSonarQubeEnv('Sonarqube') {
    //     // Due to SONARMSBRU-307 value of sonar.host.url and credentials should be passed on command line
    //     sh "${sqScannerMsBuildHome}/sonar-scanner-3.2.0.1227/bin/sonar-scanner begin /d:sonar.host.url=%SONAR_HOST_URL% /d:sonar.login=%SONAR_AUTH_TOKEN%"
    //     sh 'MSBuild.exe /t:Rebuild'
    //     sh "${sqScannerMsBuildHome}/sonar-scanner-3.2.0.1227/bin/sonar-scanner end"
    //   }
    // }

    stage('Code Quality') {
        echo "Running SonarQube static code analysis."
        openshiftBuild bldCfg: 'hub-api-sonar-develop.build-sonar-develop', showBuildLogs: 'true'
    }

    stage('Dependency Security Check') {
        echo "Running Snyk analysis of dependencies"
        openshiftBuild bldCfg: 'hub-api-snyk-develop.build-snyk-develop', showBuildLogs: 'true'
    }
    
    stage('Build Image') {
        echo "Building..."
        openshiftBuild bldCfg: 'hub-api', showBuildLogs: 'true'
        openshiftTag destStream: 'hub-api', verbose: 'true', destTag: '$BUILD_ID', srcStream: 'hub-api', srcTag: 'latest'
    }

    stage('Deploy on Dev') {
        echo "Deploying to dev..."
        openshiftTag destStream: 'hub-api', verbose: 'true', destTag: 'dev', srcStream: 'hub-api', srcTag: '$BUILD_ID'
    }   
}

//See https://github.com/jenkinsci/kubernetes-plugin
podTemplate(label: 'owasp-zap', name: 'owasp-zap', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '3Gi',
    resourceLimitMemory: '4Gi',
    workingDir: '/tmp',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}'
  )
]) {
     node('owasp-zap') {
       stage('ZAP Security Scan') {
         dir('/zap') {
                def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://hub-api-ntu9uh-dev.pathfinder.gov.bc.ca'
                publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                echo "Return value is: ${retVal}"
         }
       }
     }
}

stage('Deploy on Test') {
    input "Deploy to test?"
    node('master') {
        openshiftTag destStream: 'hub-api', verbose: 'true', destTag: 'test', srcStream: 'hub-api', srcTag: '$BUILD_ID'
	sh 'sleep 3m'
    }
}
